apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    def currentVersionCode = getVersionCode()

    defaultConfig {
        applicationId "com.transportmm.tsportapp"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode currentVersionCode
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
    }

    signingConfigs {

        //在这里配置相关的签名信息
        keyStore {
            storeFile file("../android/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        // Notice the production keystore and password are not checked in. Signing resources for
        // release builds are typically stored somewhere more secure than the source repo.
        // This typically also means that release builds are signed manually rather than by
        // Gradle.
    }

    buildTypes {

        debug {
            buildConfigField "String", "DOMAIN_NAME", "\"${APP_URL_TEST}\""
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            versionNameSuffix "-debug" //设置后缀
            manifestPlaceholders.UMENG_CHANNEL_VALUE = "test"
//            signingConfig signingConfigs.keyStore
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            buildConfigField "String", "DOMAIN_NAME", "\"${APP_URL}\""
            buildConfigField "boolean", "LOG_DEBUG", "false"
            buildConfigField "boolean", "USE_CANARY", "false"
            signingConfig signingConfigs.keyStore
            minifyEnabled true //混淆开启
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        previous {
            buildConfigField "String", "DOMAIN_NAME", "\"${APP_URL_PREV}\""
            buildConfigField "boolean", "LOG_DEBUG", "true"
            buildConfigField "boolean", "USE_CANARY", "true"
            versionNameSuffix "-previous" //设置后缀
            manifestPlaceholders.UMENG_CHANNEL_VALUE = "previous"
            signingConfig signingConfigs.keyStore
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }
    }

    lintOptions {
        disable 'InvalidPackage'
        disable "ResourceType"
        abortOnError false
    }

    aaptOptions {
        noCompress 'apk'
    }

    packagingOptions {
        // Exclude files to avoid packaging collisions (same file name in multiple dependencies).
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
        exclude 'META-INF/NOTICE'
    }

    // Test Android jar comes with unimplemented methods that throw exceptions by default. This
    // option forces the methods to return default values instead. Required for static methods,
    // such as TextUtils, as those cannot be mocked with Mockito.
    // Refer http://tools.android.com/tech-docs/unit-testing-support#TOC-Method-...-not-mocked.-
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()
        def runTasks = gradle.startParameter.taskNames        //仅在assembleRelease任务是增加版本号
        if ('assembleRelease' in runTasks) {
            versionProps['VERSION_CODE'] = (++versionCode).toString()
            versionProps.store(versionFile.newWriter(), null)
        }
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    //tools
    provided rootProject.ext.dependencies["javax.annotation"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    compile rootProject.ext.dependencies["progressmanager"]
    //view
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
        exclude module: 'butterknife-annotations'
    }
    //xinhuasdk
    compile project(':xinhuasdk')
    // test
    testCompile rootProject.ext.dependencies["junit"]
    debugCompile rootProject.ext.dependencies["canary-debug"]
    releaseCompile rootProject.ext.dependencies["canary-release"]
    testCompile rootProject.ext.dependencies["canary-release"]
    androidTestCompile 'junit:junit:4.12'
}
